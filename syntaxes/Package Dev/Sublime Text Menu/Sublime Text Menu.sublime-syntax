%YAML 1.2
---
# http://www.sublimetext.com/docs/3/syntax.html
name: Sublime Text Menu (JSON)
file_extensions:
  - sublime-menu
scope: source.json.sublime.menu
contexts:
  main:
    - match: (?=\[)
      push: main-sequence
    - include: expect-sequence-rest

  main-sequence:
    - match: \[
      scope: punctuation.section.sequence.begin.json
      push:
        - meta_scope: meta.sequence.json meta.menu.collection.sublime-menu
        - match: \]
          scope: punctuation.section.sequence.end.json
          set: only-comments
        - match: (?=\{)
          push: [in-sequence-expect-comma, menu-entry-pop]
        - include: comments
        - match: \S
          scope: invalid.illegal.expected-mapping.sublime-menu

  menu-entry-pop:
    - match: \{
      scope: punctuation.section.mapping.begin.json
      set:
        - meta_scope: meta.mapping.json
        - match: \}
          scope: punctuation.section.mapping.end.json
          pop: true
        - match: (?=")
          push: [in-mapping-expect-comma, main-key]
        - include: expect-key-rest

  main-key:
    - clear_scopes: 1
    - match: (")(caption)(")
      scope: meta.mapping.key.json meta.main-key.sublime-menu string.quoted.double.json
      captures:
        1: punctuation.definition.string.begin.json
        2: keyword.other.main.sublime-menu
        3: punctuation.definition.string.end.json
      set: [expect-caption-string-value, expect-colon]
    - match: (")(id)(")
      scope: meta.mapping.key.json meta.main-key.sublime-menu string.quoted.double.json
      captures:
        1: punctuation.definition.string.begin.json
        2: keyword.other.main.sublime-menu
        3: punctuation.definition.string.end.json
      set: [expect-id-string-value, expect-colon]
    - match: (")(mnemonic)(")
      scope: meta.mapping.key.json meta.main-key.sublime-menu string.quoted.double.json
      captures:
        1: punctuation.definition.string.begin.json
        2: keyword.other.main.sublime-menu
        3: punctuation.definition.string.end.json
      set: [expect-mnemonic-string-value, expect-colon]
    - match: (")(command)(")
      scope: meta.mapping.key.json meta.main-key.sublime-menu string.quoted.double.json
      captures:
        1: punctuation.definition.string.begin.json
        2: keyword.other.main.sublime-menu
        3: punctuation.definition.string.end.json
      set: [expect-command-name-value, expect-colon]
    - match: (")(args)(")
      scope: meta.mapping.key.json meta.main-key.sublime-menu string.quoted.double.json
      captures:
        1: punctuation.definition.string.begin.json
        2: keyword.other.main.sublime-menu
        3: punctuation.definition.string.end.json
      set: [expect-mapping-value, expect-colon]
    - match: (")(children)(")
      scope: meta.mapping.key.json meta.main-key.sublime-menu string.quoted.double.json
      captures:
        1: punctuation.definition.string.begin.json
        2: keyword.other.main.sublime-menu
        3: punctuation.definition.string.end.json
      set: [expect-children-sequence-value, expect-colon]
    - match: (")(platform)(")
      scope: meta.mapping.key.json meta.main-key.sublime-menu string.quoted.double.json
      captures:
        1: punctuation.definition.string.begin.json
        2: keyword.other.main.sublime-menu
        3: punctuation.definition.string.end.json
      set: [expect-platform-string-value, expect-colon]
    - match: \"
      scope: punctuation.definition.string.begin.json
      set:
      - meta_scope: meta.mapping.key.json meta.main-key.sublime-menu string.quoted.double.json
      - match: \"
        scope: punctuation.definition.string.end.json
        set: [expect-any-value, expect-colon]

  expect-mnemonic-string-value:
    - match: (?=")
      set: [mapping-value-meta, mnemonic-string-pop]
    - include: expect-string-rest

  mnemonic-string-pop:
    - match: (\")([A-Za-z])(\")
      scope: string.quoted.double.json
      captures:
        1: punctuation.definition.string.begin.json
        2: support.constant.mnemonic.sublime-menu
        3: punctuation.definition.string.end.json
      pop: true
    - match: (\")([A-Za-z])?([^\"]*)
      captures:
        1: punctuation.definition.string.begin.json
        2: support.constant.mnemonic.sublime-menu
        3: invalid.illegal.expected-string.sublime-menu
      set:
        - match: \"
          scope: punctuation.definition.string.end.json
          pop: true
        - match: \S
          scope: invalid.illegal.expected-string.sublime-menu
          pop: true

  expect-platform-string-value:
    - match: (?=")
      set: [mapping-value-meta, platform-name-string-pop]
    - include: expect-string-rest

  platform-name-string-pop:
    - match: (\")(!)?(Windows|Linux|OSX)(\")
      scope: meta.platform-name.sublime-menu string.quoted.double.json
      captures:
        1: punctuation.definition.string.begin.json
        2: keyword.operator.logical.sublime-menu
        3: support.constant.command-name.sublime-menu
        4: punctuation.definition.string.end.json
      pop: true
    - match: \"
      scope: punctuation.definition.string.begin.json
      set:
        - meta_scope: meta.platform-name.sublime-menu string.quoted.double.json
        # Don't mark as invalid while typing. We have completions anyway.
        # - meta_content_scope: invalid.illegal.invalid-platform.sublime-menu
        - match: \"
          scope: punctuation.definition.string.end.json
          pop: true
        - include: string-escape
        - match: $\n?
          scope: invalid.illegal.unclosed-string.json
          pop: true

  expect-children-sequence-value:
    - match: (?=\[)
      set: [mapping-value-meta, children-sequence-pop]
    - include: expect-sequence-rest

  children-sequence-pop:
    - match: \[
      scope: meta.modifiers.sublime-menu punctuation.section.sequence.begin.json
      set:
        - meta_scope: meta.sequence.json
        - match: \]
          scope: punctuation.section.sequence.end.json
          pop: true
        - match: (?=\{)
          scope: punctuation.section.mapping.begin.json
          push: [in-sequence-expect-comma, menu-entry-pop]
        - include: comments
        - match: \S
          scope: invalid.illegal.expected-mapping.sublime-menu

  expect-id-string-value:
    - match: (?=")
      set: [mapping-value-meta, id-string-pop]
    - include: expect-string-rest

  id-string-pop:
    - match: \"
      scope: punctuation.definition.string.begin.json punctuation.definition.snippet.begin.sublime
      set:
        - meta_scope: string.quoted.double.json meta.id.sublime-menu
        - meta_content_scope: entity.name.id.sublime-menu
        - match: '"'
          scope: punctuation.definition.string.end.json punctuation.definition.snippet.end.sublime
          pop: true
        - match: $\n?
          scope: invalid.illegal.unclosed-string.json
          pop: true
        - include: string-escape

  comments:
    - include: Sublime JSON.sublime-syntax#comments

  only-comments:
    - include: Sublime JSON.sublime-syntax#only-comments

  expect-colon:
    - include: Sublime JSON.sublime-syntax#expect-colon

  expect-string-value:
    - include: Sublime JSON.sublime-syntax#expect-string-value

  expect-caption-string-value:
    - include: Sublime JSON.sublime-syntax#expect-caption-string-value

  expect-command-name-value:
    - include: Sublime JSON.sublime-syntax#expect-command-name-value

  expect-string-rest:
    - include: Sublime JSON.sublime-syntax#expect-string-rest

  expect-mapping-value:
    - include: Sublime JSON.sublime-syntax#expect-mapping-value

  expect-any-value:
    - include: Sublime JSON.sublime-syntax#expect-any-value

  expect-key-rest:
    - include: Sublime JSON.sublime-syntax#expect-key-rest

  expect-sequence-rest:
    - include: Sublime JSON.sublime-syntax#expect-sequence-rest

  string-escape:
    - include: Sublime JSON.sublime-syntax#string-escape

  in-sequence-expect-comma:
    - include: Sublime JSON.sublime-syntax#in-sequence-expect-comma

  in-mapping-expect-comma:
    - include: Sublime JSON.sublime-syntax#in-mapping-expect-comma

  mapping-value-meta:
    - clear_scopes: 1
    - meta_scope: meta.mapping.value.json
    - match: ''
      pop: true
