%YAML 1.2
# There are multiple represenations of a Property List,
# but here we only care about the XML one.
#
# XML Property Lists are XML files with the following DTD:
# https://www.apple.com/DTDs/PropertyList-1.0.dtd
#
# Notably:
#
# - besides <plist>, no tag expects an attribute
# - all data elements do not expect child elements
# - <dict> expects <key>-'data' *pairs*
# - <true /> and <false /> must be empty
---
name: Property List (XML)
scope: text.xml.plist
file_extensions:
  - plist
  - tmSnippet
  - tmTheme
  - stTheme
  - tmLanguage
  - hidden-tmSnippet
  - hidden-tmTheme
  - hidden-stTheme
  - hidden-tmLanguage
# first_line_match: ^\s*<!DOCTYPE plist|^\s*<plist version="1\.0">

contexts:

  main:
    - include: xml-declarations
    - match: '(<)(plist)(?:\s+(version)\s*(=)\s*((")1.0(")))?\s*(>)'
      scope: meta.tag.xml
      captures:
        1: punctuation.definition.tag.begin
        2: entity.name.tag.localname.xml
        3: entity.other.attribute-name.localname.xml
        4: punctuation.separator.key-value.xml
        5: string.quoted.double.xml
        6: punctuation.definition.string.begin.xml
        7: punctuation.definition.string.end.xml
        8: punctuation.definition.tag.end
      push:
        - meta_content_scope: meta.inside-plist.plist
        - match: '(</)(plist)\s*(>)'
          scope: meta.tag.xml
          captures:
            1: punctuation.definition.tag.begin.xml
            2: entity.name.tag.localname.xml
            3: punctuation.definition.tag.end.xml
          set: whitespace-or-tag
        - include: comments
        - match: '(?=\S)'
          push: any-known-element
    - include: whitespace-or-tag

  xml-declarations:
    - match: '^(?=<\?|<!)'
      push:
        - match: $
          pop: true
        - include: scope:text.xml

  comments:
    # this is simplified; actual xml comments are more complicated
    - match: '<!--'
      scope: punctuation.definition.comment.begin.xml
      push:
        - meta_scope: comment.block.xml
        - match: '-->'
          scope: punctuation.definition.comment.end.xml
          pop: true

  unknown-tag:
    - meta_scope: meta.tag.xml
    - meta_content_scope: invalid.illegal.unknown-or-unexpected-tag.plist
    - match: '>'
      scope: punctuation.definition.tag.end.xml
      pop: true

  number:
    - match: '(<)(integer)\s*(>)'
      scope: meta.tag.xml
      captures:
        1: punctuation.definition.tag.begin.xml
        2: entity.name.tag.localname.xml
        3: punctuation.definition.tag.end.xml
      set:
        - meta_content_scope: meta.inside-value.integer.plist
        - match: '[+-]?\d+'
          scope: constant.numeric.plist
          push:
            - match: '[^\s<]+'
              scope: invalid.illegal.unexpected-text.plist
            - match: '(?=<)'
              pop: true
        - match: '[^\s<]+'
          scope: invalid.illegal.expected-integer.plist
        - include: pop-tag-no-children
    - match: '(<)(real)\s*(>)'
      scope: meta.tag.xml
      captures:
        1: punctuation.definition.tag.begin.xml
        2: entity.name.tag.localname.xml
        3: punctuation.definition.tag.end.xml
      set:
        - meta_content_scope: meta.inside-value.real.plist
        - match: '[+-]?\d+(\.\d*)?(E[+-]\d+)?'
          scope: constant.numeric.plist
          push:
            - match: '[^\s<]+'
              scope: invalid.illegal.unexpected-text.plist
            - match: '(?=<)'
              pop: true
        - match: '[^\s<]+'
          scope: invalid.illegal.expected-number.plist
        - include: pop-tag-no-children

  boolean:
    - match: '(<)(true|false)\s*(/>)'
      scope: meta.tag.xml
      captures:
        1: punctuation.definition.tag.begin.xml
        2: entity.name.tag.localname.xml constant.language.boolean.plist
        3: punctuation.definition.tag.end.xml
      pop: true

  string:
    - match: '(<)(string)\s*(>)'
      scope: meta.tag.xml
      captures:
        1: punctuation.definition.tag.begin.xml
        2: entity.name.tag.localname.xml
        3: punctuation.definition.tag.end.xml
      set:
        - meta_content_scope: meta.inside-value.string.plist
        - include: pop-tag-no-children

  date:
    - match: '(<)(date)\s*(>)'
      scope: meta.tag.xml
      captures:
        1: punctuation.definition.tag.begin.xml
        2: entity.name.tag.localname.xml
        3: punctuation.definition.tag.end.xml
      set:
        - meta_content_scope: meta.inside-value.date.plist
        - include: pop-tag-no-children # TODO: ISO 8601 format date i.e. "2007-04-05T14:30Z" or "2007-04-05T12:30-02:00"

  data:
    - match: '(<)(data)\s*(>)'
      scope: meta.tag.xml
      captures:
        1: punctuation.definition.tag.begin.xml
        2: entity.name.tag.localname.xml
        3: punctuation.definition.tag.end.xml
      set:
        - meta_content_scope: meta.inside-value.data.plist
        - include: pop-tag-no-children # TODO: expect base-64 only

  empty-array:
    - match: '(<)(array)\s*(/>)'
      scope: meta.tag.xml
      captures:
        1: punctuation.definition.tag.begin.xml
        2: entity.name.tag.localname.xml
        3: punctuation.definition.tag.end.xml
      pop: true

  any-known-element:
    # this context pops after the first matched element
    - include: number
    - include: boolean
    - include: string
    - include: date
    - include: data
    - include: empty-array
    - match: '(<)(dict)\s*(>)'
      scope: meta.tag.xml
      captures:
        1: punctuation.definition.tag.begin.xml
        2: entity.name.tag.localname.xml
        3: punctuation.definition.tag.end.xml
      set: dict-key
    - match: '(<)(array)\s*(>)'
      scope: meta.tag.xml
      captures:
        1: punctuation.definition.tag.begin.xml
        2: entity.name.tag.localname.xml
        3: punctuation.definition.tag.end.xml
      set: end-of-array
    - include: whitespace-or-tag

  pop-tag-no-children:
    - match: '(</)(\2)\s*(>)'
      scope: meta.tag.xml
      captures:
        1: punctuation.definition.tag.begin.xml
        2: entity.name.tag.localname.xml
        3: punctuation.definition.tag.end.xml
      pop: true
    - match: '<(?!!)'
      scope: punctuation.definition.tag.begin.xml
      push: unknown-tag
    - include: scope:text.xml

  dict-key:
    - meta_content_scope: meta.inside-dict.plist
    - match: '(</)(dict)\s*(>)'
      scope: meta.tag.xml
      captures:
        1: punctuation.definition.tag.begin.xml
        2: entity.name.tag.localname.xml
        3: punctuation.definition.tag.end.xml
      pop: true
    - match: '(<)(key)\s*(>)'
      scope: meta.tag.xml
      captures:
        1: punctuation.definition.tag.begin.xml
        2: entity.name.tag.localname.xml
        3: punctuation.definition.tag.end.xml
      push: [any-known-element, inside-dict-key]
    - include: whitespace-or-tag

  inside-dict-key:
    - meta_content_scope: meta.inside-dict-key.plist
    - include: pop-tag-no-children

  whitespace-or-tag:
    - include: comments
    - match: '<'
      scope: punctuation.definition.tag.begin.xml
      push: unknown-tag
    - match: '\s+'
    - match: '[^\s<]+'
      scope: invalid.illegal.unexpected-text.plist

  end-of-array:
    - meta_content_scope: meta.inside-array.plist
    - include: comments
    - match: '(</)(array)\s*(>)'
      scope: meta.tag.xml
      captures:
        1: punctuation.definition.tag.begin.xml
        2: entity.name.tag.localname.xml
        3: punctuation.definition.tag.end.xml
      pop: true
    - match: '(?=\S)'
      push: any-known-element
