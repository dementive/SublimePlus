%YAML 1.2
---
# http://www.sublimetext.com/docs/3/syntax.html
name: Sublime Text Color Scheme (JSON)
file_extensions:
  - sublime-color-scheme
  - hidden-color-scheme
scope: source.json.sublime.color-scheme

contexts:
  main:
    - match: (?=\{)
      push: main-mapping
    - include: expect-mapping-rest

  main-mapping:
    - match: \{
      scope: punctuation.section.mapping.begin.json
      push:
        - meta_scope: meta.color-scheme.collection.sublime-color-scheme meta.mapping.json
        - match: \}
          scope: punctuation.section.mapping.end.json
          set: only-comments
        - match: (?=")
          push: [in-mapping-expect-comma, main-key]
        - include: expect-key-rest

  main-key:
    - clear_scopes: 1
    - match: (")(rules)(")
      scope: meta.mapping.key.json meta.main-key.sublime-color-scheme string.quoted.double.json
      captures:
        1: punctuation.definition.string.begin.json
        2: keyword.other.main.sublime-color-scheme
        3: punctuation.definition.string.end.json
      set: [expect-rules-sequence-value, expect-colon]
    - match: (")(variables)(")
      scope: meta.mapping.key.json meta.main-key.sublime-color-scheme string.quoted.double.json
      captures:
        1: punctuation.definition.string.begin.json
        2: keyword.other.main.sublime-color-scheme
        3: punctuation.definition.string.end.json
      set: [expect-variables-mapping-value, expect-colon]
    - match: (")(globals)(")
      scope: meta.mapping.key.json meta.main-key.sublime-color-scheme string.quoted.double.json
      captures:
        1: punctuation.definition.string.begin.json
        2: keyword.other.main.sublime-color-scheme
        3: punctuation.definition.string.end.json
      set: [expect-globals-mapping-value, expect-colon]
    - match: (")(name|author)(")
      scope: meta.mapping.key.json meta.main-key.sublime-color-scheme string.quoted.double.json
      captures:
        1: punctuation.definition.string.begin.json
        2: keyword.other.main.sublime-color-scheme
        3: punctuation.definition.string.end.json
      set: [expect-string-value, expect-colon]
    - include: in-dictionary-main-key

  in-dictionary-main-key:
    - match: \"
      scope: punctuation.definition.string.begin.json
      set:
        - clear_scopes: 1
        - meta_scope: meta.mapping.key.json meta.main-key.sublime-color-scheme string.quoted.double.json
        - match: \"
          scope: punctuation.definition.string.end.json
          set: [expect-any-value, expect-colon]
        - include: string-escape

  expect-rules-sequence-value:
    - match: (?=\[)
      set: [mapping-value-meta, rules-sequence-pop]
    - include: expect-sequence-rest

  rules-sequence-pop:
    - match: \[
      scope: punctuation.section.sequence.begin.json
      set:
        - meta_scope: meta.rules.collection.sublime-color-scheme meta.sequence.json
        - match: \]
          scope: punctuation.section.sequence.end.json
          pop: true
        - match: (?=\{)
          push: [in-sequence-expect-comma, rules-mapping-pop]
        - include: comments
        - match: \S
          scope: invalid.illegal.expected-mapping.sublime-color-scheme

  rules-mapping-pop:
    - match: \{
      scope: punctuation.section.mapping.begin.json
      set:
        - meta_scope: meta.rule.sublime-color-scheme meta.mapping.json
        - match: \}
          scope: punctuation.section.mapping.end.json
          pop: true
        - match: (?=")
          push: [in-mapping-expect-comma, rule-key]
        - include: expect-key-rest

  rule-key:
    - clear_scopes: 1
    - match: (")(scope)(")
      scope: meta.mapping.key.json meta.rule-key.sublime-color-scheme string.quoted.double.json
      captures:
        1: punctuation.definition.string.begin.json
        2: keyword.other.rule.sublime-color-scheme
        3: punctuation.definition.string.end.json
      set: [expect-scope-string-value, expect-colon]
    - match: (")(background|selection_foreground)(")
      scope: meta.mapping.key.json meta.rule-key.sublime-color-scheme string.quoted.double.json
      captures:
        1: punctuation.definition.string.begin.json
        2: keyword.other.rule.sublime-color-scheme
        3: punctuation.definition.string.end.json
      set: [expect-color-string-value, expect-colon]
    - match: (")(foreground)(")
      scope: meta.mapping.key.json meta.rule-key.sublime-color-scheme string.quoted.double.json
      captures:
        1: punctuation.definition.string.begin.json
        2: keyword.other.rule.sublime-color-scheme
        3: punctuation.definition.string.end.json
      set: [expect-color-list-string-value, expect-colon]
    - match: (")(foreground_adjust)(")
      scope: meta.mapping.key.json meta.rule-key.sublime-color-scheme string.quoted.double.json
      captures:
        1: punctuation.definition.string.begin.json
        2: keyword.other.rule.sublime-color-scheme
        3: punctuation.definition.string.end.json
      set: [expect-color-adjuster-value, expect-colon]
    - match: (")(font_style)(")
      scope: meta.mapping.key.json meta.rule-key.sublime-color-scheme string.quoted.double.json
      captures:
        1: punctuation.definition.string.begin.json
        2: keyword.other.rule.sublime-color-scheme
        3: punctuation.definition.string.end.json
      set: [expect-fontstyle-string-value, expect-colon]
    - match: (")(name)(")
      scope: meta.mapping.key.json meta.rule-key.name.sublime-color-scheme string.quoted.double.json
      captures:
        1: punctuation.definition.string.begin.json
        2: keyword.other.rule.sublime-color-scheme
        3: punctuation.definition.string.end.json
      set: [expect-string-value, expect-colon]
    - include: in-dictionary-rule-key
    - include: expect-mapping-rest

  in-dictionary-rule-key:
    - match: \"
      scope: punctuation.definition.string.begin.json
      set:
        - clear_scopes: 1
        - meta_scope: meta.mapping.key.json meta.rule-key.sublime-color-scheme string.quoted.double.json
        - match: \"
          scope: punctuation.definition.string.end.json
          set: [expect-any-value, expect-colon]
        - include: string-escape

  expect-variables-mapping-value:
    - match: (?=\{)
      set: [mapping-value-meta, variable-mapping-pop]
    - include: expect-mapping-rest

  variable-mapping-pop:
    - match: \{
      scope: punctuation.section.mapping.begin.json
      set:
        - meta_scope: meta.variables.sublime-color-scheme meta.mapping.json
        - match: \}
          scope: punctuation.section.mapping.end.json
          pop: true
        - match: (?=")
          push:
            - in-mapping-expect-comma
            - expect-color-string-value
            - expect-colon
            - variable-mapping-key-meta
            - variable-mapping-key-string
        - include: expect-key-rest

  variable-mapping-key-meta:
    - clear_scopes: 1
    - meta_scope:
        meta.mapping.key.json
        string.quoted.double.json
        meta.variable-name.sublime-color-scheme
    - match: ''
      pop: true

  variable-mapping-key-string:
    - match: '"'
      scope: punctuation.definition.string.begin.json
      set:
        - meta_content_scope: entity.name.variable.sublime-color-scheme
        - match: '"'
          scope: punctuation.definition.string.end.json
          pop: true
        - match: $\n?
          scope: invalid.illegal.unclosed-string.json
          pop: true
        - include: string-escape

  expect-globals-mapping-value:
    - match: (?=\{)
      set: [mapping-value-meta, globals-mapping-pop]
    - include: expect-mapping-rest

  globals-mapping-pop:
    - match: \{
      scope: punctuation.section.mapping.begin.json
      set:
        - meta_scope: meta.globals.sublime-color-scheme meta.mapping.json
        - match: \}
          scope: punctuation.section.mapping.end.json
          pop: true
        - match: (?=")
          push: [in-mapping-expect-comma, globals-mapping-key]
        - include: expect-key-rest

  globals-mapping-key:
    - clear_scopes: 1
    - meta_scope: meta.mapping.key.json meta.globals-key.sublime-color-scheme string.quoted.double.json
    - match: |-
        (?x)
        (")(
          accent|shadow|invisibles|caret|line_highlight
          |foreground|background|selection|selection_border|selection_foreground
          |inactive_selection(?:_border|_foreground)?  # *_foreground added in 4050, *_border in 4074
          |highlight|find_highlight|find_highlight_foreground
          |stack_guide|active_guide|guide
          |misspelling
          |brackets_foreground|bracket_contents_foreground|tags_foreground
          |minimap_border|gutter(?:_(?:foreground|foreground_highlight))?|rulers|fold_marker
          |scroll_(?:highlight|selected_highlight)
          |line_diff_(?:modified|added|deleted) # added in 3186 & 3189
          |block_caret(?:_(?:border|underline))? # block_caret added in 3190, others in 4086.
        )(")
      captures:
        1: punctuation.definition.string.begin.json
        2: entity.name.globals.sublime-color-scheme
        3: punctuation.definition.string.end.json
      set: [expect-color-string-value, expect-colon]
    - match: (")((?:phantom|popup|sheet)_css)(")
      captures:
        1: punctuation.definition.string.begin.json
        2: entity.name.globals.sublime-color-scheme
        3: punctuation.definition.string.end.json
      set: [expect-css-string-value, expect-colon]
    - match: (")(shadow_width|(?:selection|block_caret)_corner_radius|selection_border_width|line_diff_width)(")
      captures:
        1: punctuation.definition.string.begin.json
        2: entity.name.globals.sublime-color-scheme
        3: punctuation.definition.string.end.json
      set: [expect-possible-number-in-string-value, expect-colon]
    - match: (")(implicit_selection_foreground)(")
      captures:
        1: punctuation.definition.string.begin.json
        2: entity.name.globals.sublime-color-scheme
        3: punctuation.definition.string.end.json
      set: [expect-string-boolean-value, expect-colon]
    - match: (")(brackets_options|bracket_contents_options|tags_options)(")
      captures:
        1: punctuation.definition.string.begin.json
        2: entity.name.globals.sublime-color-scheme
        3: punctuation.definition.string.end.json
      set: [expect-underlinestyle-string-value, expect-colon]
    - match: (")((?:selection|block_caret)_corner_style)(")
      captures:
        1: punctuation.definition.string.begin.json
        2: entity.name.globals.sublime-color-scheme
        3: punctuation.definition.string.end.json
      set: [expect-cornerstyle-string-value, expect-colon]
    - match: ''
      set:  # reset meta settings
        - clear_scopes: 1
        - match: \"
          scope: punctuation.definition.string.begin.json
          set:
            - clear_scopes: 1
            - meta_scope: meta.mapping.key.json meta.globals-key.sublime-color-scheme string.quoted.double.json
            - match: \"
              scope: punctuation.definition.string.end.json
              set: [expect-any-value, expect-colon]
            - include: string-escape

  comments:
    - include: Sublime JSON.sublime-syntax#comments

  only-comments:
    - include: Sublime JSON.sublime-syntax#only-comments

  expect-colon:
    - include: Sublime JSON.sublime-syntax#expect-colon

  expect-any-value:
    - include: Sublime JSON.sublime-syntax#expect-any-value

  expect-scope-string-value:
    - include: Sublime JSON.sublime-syntax#expect-scope-string-value

  expect-key-rest:
    - include: Sublime JSON.sublime-syntax#expect-key-rest

  expect-sequence-rest:
    - include: Sublime JSON.sublime-syntax#expect-sequence-rest

  expect-mapping-rest:
    - include: Sublime JSON.sublime-syntax#expect-mapping-rest

  expect-string-rest:
    - include: Sublime JSON.sublime-syntax#expect-string-rest

  expect-string-value:
    - include: Sublime JSON.sublime-syntax#expect-string-value

  string-escape:
    - include: Sublime JSON.sublime-syntax#string-escape

  expect-boolean-value:
    - include: Sublime JSON.sublime-syntax#expect-boolean-value

  expect-mapping-value:
    - include: Sublime JSON.sublime-syntax#expect-mapping-value

  in-sequence-expect-comma:
    - include: Sublime JSON.sublime-syntax#in-sequence-expect-comma

  in-mapping-expect-comma:
    - include: Sublime JSON.sublime-syntax#in-mapping-expect-comma

  expect-command-name-value:
    - include: Sublime JSON.sublime-syntax#expect-command-name-value

  mapping-value-meta:
    - clear_scopes: 1
    - meta_scope: meta.mapping.value.json
    - match: ''
      pop: true

  expect-color-string-value:
    - match: (?=")
      set: [mapping-value-meta, color-string-pop]
    - include: expect-string-rest

  expect-color-list-string-value:
    - match: (?=")
      set: [mapping-value-meta, color-string-pop]
    - match: (?=\[)
      set: [mapping-value-meta, color-list-pop]
    - include: expect-string-rest # it's more common to expect a string than a sequence of strings, so we'll act as though a string is expected for normal use

  color-string-pop:
    - match: \"
      scope: punctuation.definition.string.begin.json
      set:
        - meta_scope: string.quoted.double.json meta.color.sublime-color-scheme
        - match: '"'
          scope: punctuation.definition.string.end.json
          pop: true
        - match: $\n?
          scope: invalid.illegal.unclosed-string.json
          pop: true
        # The CSS syntax doesn't recognize bare words as variables,
        # i.e. without the "custom property prefix" of `--`,
        # so we push a prototype.
        - match: ''
          push:
            - meta_scope: source.css-color
            - include: CSS.sublime-syntax#color-values
          with_prototype:
            - match: (?=")
              pop: true
            - include: string-escape
            - include: color-custom-functions
        - include: string-escape

  color-custom-functions:
    # Collection of functions that differ in behavior from the CSS syntax
    # due to the ST implementation being based on a draft that has since evolved.
    # https://www.sublimetext.com/docs/minihtml.html#css:ver-dev
    - include: color-var-function
    - include: color-min-contrast-function
    # Adjusters may be used directly (#327)
    - include: CSS.sublime-syntax#color-adjuster-functions

  color-min-contrast-function:
    # Custom function of ST
    - match: \b(?i:min-contrast)(?=\()
      scope: support.function.min-contrast.css
      push:
        - meta_scope: meta.function-call.min-contrast.css
        - match: \)
          scope: meta.group.css punctuation.section.group.end.css
          pop: true
        - match: \(
          scope: punctuation.section.group.begin.css
          push:
            - meta_scope: meta.group.css
            - match: (?=\))
              pop: true
            - match: (?=")  # embed this here so we don't have to "with_prototype"
              pop: true
            - include: color-var-function
            - include: CSS.sublime-syntax#color-values
            - include: CSS.sublime-syntax#numeric-constants
        - match: (?=")
          pop: true

  color-var-function:
    # Supports identifiers without leading `--`
    - match: \b(?i:var)(?=\()
      scope: support.function.var.css
      push:
        - meta_scope: meta.function-call.var.css
        - match: \(
          scope: punctuation.section.group.begin.css
          set:
            - meta_scope: meta.function-call.var.css meta.group.css
            - match: \)
              scope: meta.group.css punctuation.section.group.end.css
              pop: true
            - match: (?:--)?[\w-]+
              scope: variable.other.sublime-color-scheme
            - match: (?=")  # embed this here so we don't have to "with_prototype"
              pop: true

  color-list-pop:
    - match: \[
      scope: meta.foreground.color-list.sublime-color-scheme punctuation.section.sequence.begin.json
      set:
        - meta_scope: meta.sequence.json
        - meta_content_scope: meta.foreground.color-list.sublime-color-scheme
        - match: \]
          scope: meta.foreground.color-list.sublime-color-scheme punctuation.section.sequence.end.json
          pop: true
        - match: (?=")
          push: [in-sequence-expect-comma, color-string-pop]
        - include: comments
        - match: '[^\s\]\/,]+'
          scope: invalid.illegal.color.expected-string.sublime-color-scheme

  expect-color-adjuster-value:
    - match: (?=")
      set: [mapping-value-meta, color-adjuster-string-pop]
    - include: expect-string-rest

  color-adjuster-string-pop:
    - match: \"
      scope: punctuation.definition.string.begin.json
      set:
        - meta_scope: string.quoted.double.json meta.color-adjuster.sublime-color-scheme
        # Set a fake source scope so it's recognized as "embedded code",
        # but don't set "source.css" to avoid completions provided by shipped package.
        - meta_content_scope: source.css-color-adjuster
        - match: '"'
          scope: punctuation.definition.string.end.json
          pop: true
        - match: $\n?
          scope: invalid.illegal.unclosed-string.json
          pop: true
        - include: color-var-function
        - include: CSS.sublime-syntax#color-adjuster-functions

  expect-css-string-value:
    - match: (?=")
      set: [mapping-value-meta, css-string-pop]
    - include: expect-string-rest

  css-string-pop:
    - match: \"
      scope: punctuation.definition.string.begin.json
      set:
        - meta_scope: string.quoted.double.json meta.css.sublime-color-scheme
        - meta_content_scope: source.css
        - match: '"'
          scope: punctuation.definition.string.end.json
          pop: true
        - match: $\n?
          scope: invalid.illegal.unclosed-string.json
          pop: true
        - match: ''
          push:
            - include: scope:source.css
          with_prototype:
            - match: (?="|$)
              pop: true
            - include: string-escape
            - include: color-custom-functions


  expect-fontstyle-string-value:
    - match: (?=")
      set: [mapping-value-meta, fontstyle-string-pop]
    - include: expect-string-rest

  fontstyle-string-pop:
    - match: \"
      scope: punctuation.definition.string.begin.json
      set:
        - meta_scope: meta.font-style.sublime-color-scheme string.quoted.double.json
        - match: '"'
          scope: punctuation.definition.string.end.json
          pop: true
        - match: $\n?
          scope: invalid.illegal.unclosed-string.json
          pop: true
        - include: font-style
        - include: string-escape

  font-style:
    - match: \b(bold|glow|italic|underline)\b  # glow & underline added in 4050 and 4074
      scope: support.constant.font-style.color-scheme

  expect-underlinestyle-string-value:
    - match: (?=")
      set: [mapping-value-meta, underline-string-pop]
    - include: expect-string-rest

  underline-string-pop:
    - match: \"
      scope: punctuation.definition.string.begin.json
      set:
        - meta_scope: meta.underline-style.sublime-color-scheme string.quoted.double.json
        - match: '"'
          scope: punctuation.definition.string.end.json
          pop: true
        - match: $\n?
          scope: invalid.illegal.unclosed-string.json
          pop: true
        - include: string-escape
        - match: \b(underline|stippled_underline|squiggly_underline|foreground)\b
          scope: support.constant.underline-style.color-scheme
        - include: font-style

  expect-string-boolean-value:
    - match: (?=")
      set: [mapping-value-meta, boolean-string-pop]
    - include: expect-string-rest

  boolean-string-pop:
    - match: \"
      scope: punctuation.definition.string.begin.json
      set:
        - meta_scope: meta.boolean-string.sublime-color-scheme string.quoted.double.json
        - match: '"'
          scope: punctuation.definition.string.end.json
          pop: true
        - match: $\n?
          scope: invalid.illegal.unclosed-string.json
          pop: true
        - include: string-escape
        - match: \b(true|false)\b
          scope: support.constant.boolean-string.color-scheme

  expect-cornerstyle-string-value:
    - match: (?=")
      set: [mapping-value-meta, cornerstyle-string-pop]
    - include: expect-string-rest

  cornerstyle-string-pop:
    - match: \"
      scope: punctuation.definition.string.begin.json
      set:
        - meta_scope: meta.corner-style.sublime-color-scheme string.quoted.double.json
        - match: '"'
          scope: punctuation.definition.string.end.json
          pop: true
        - match: $\n?
          scope: invalid.illegal.unclosed-string.json
          pop: true
        - include: string-escape
        - match: \b(square|cut|round)\b
          scope: support.constant.corner-style.color-scheme

  expect-possible-number-in-string-value:
    - match: (?=")
      set: [mapping-value-meta, possible-number-in-string-pop]
    - include: expect-string-rest

  possible-number-in-string-pop:
    - match: \"
      scope: punctuation.definition.string.begin.json
      set:
        - meta_scope: string.quoted.double.json
        - match: '"'
          scope: punctuation.definition.string.end.json
          pop: true
        - match: $\n?
          scope: invalid.illegal.unclosed-string.json
          pop: true
        - include: string-escape
        - include: Sublime JSON.sublime-syntax#number
